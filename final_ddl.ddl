-- Generated by Oracle SQL Developer Data Modeler 19.2.0.182.1216
--   at:        2025-08-22 01:36:36 BDT
--   site:      Oracle Database 10g
--   type:      Oracle Database 10g



CREATE TABLE match_events (
    id           NUMBER NOT NULL,
    match_id     NUMBER NOT NULL,
    team_id      NUMBER NOT NULL,
    player_id    NUMBER,
    minute       NUMBER(4),
    event_type   VARCHAR2(20) NOT NULL,
    notes        VARCHAR2(4000)
)
LOGGING;

ALTER TABLE match_events
    ADD CHECK ( minute >= 0
                AND minute <= 200 );

CREATE INDEX ix_events_match ON
    match_events (
        match_id
    ASC );

ALTER TABLE match_events
    ADD CONSTRAINT ck_event_type CHECK ( event_type IN (
        'goal',
        'own_goal',
        'yellow',
        'red',
        'pen_scored',
        'pen_missed',
        'sub_in',
        'sub_out'
    ) );

ALTER TABLE match_events ADD CONSTRAINT match_events_pk PRIMARY KEY ( id );

CREATE TABLE matches (
    id               NUMBER NOT NULL,
    tournament_id    NUMBER NOT NULL,
    stage_id         NUMBER NOT NULL,
    group_id         NUMBER,
    match_datetime   TIMESTAMP WITH TIME ZONE NOT NULL,
    venue            VARCHAR2(120),
    home_team_id     NUMBER NOT NULL,
    away_team_id     NUMBER NOT NULL,
    home_score       NUMBER(3) DEFAULT 0,
    away_score       NUMBER(3) DEFAULT 0,
    status           VARCHAR2(20) DEFAULT 'scheduled' NOT NULL,
    winner_team_id   NUMBER
)
LOGGING;

ALTER TABLE matches ADD CHECK ( home_score >= 0 );

ALTER TABLE matches ADD CHECK ( away_score >= 0 );

CREATE INDEX ix_matches_stage ON
    matches (
        stage_id
    ASC );

CREATE INDEX ix_matches_group ON
    matches (
        group_id
    ASC );

ALTER TABLE matches ADD CONSTRAINT ck_match_distinct_teams CHECK ( home_team_id <> away_team_id );

ALTER TABLE matches
    ADD CONSTRAINT ck_match_status CHECK ( status IN (
        'scheduled',
        'completed',
        'walkover',
        'cancelled'
    ) );

ALTER TABLE matches ADD CONSTRAINT matches_pk PRIMARY KEY ( id );

CREATE TABLE players (
    id          NUMBER NOT NULL,
    team_id     NUMBER NOT NULL,
    name        VARCHAR2(120) NOT NULL,
    position    VARCHAR2(40),
    jersey_no   NUMBER(3)
)
LOGGING;

ALTER TABLE players ADD CHECK ( jersey_no >= 0 );

CREATE INDEX ix_players_team ON
    players (
        team_id
    ASC );

ALTER TABLE players ADD CONSTRAINT players_pk PRIMARY KEY ( id );

ALTER TABLE players ADD CONSTRAINT uq_player_jersey UNIQUE ( team_id,
                                                             jersey_no );

CREATE TABLE stages (
    id              NUMBER NOT NULL,
    tournament_id   NUMBER NOT NULL,
    name            VARCHAR2(60) NOT NULL,
    stage_type      VARCHAR2(20) NOT NULL,
    order_index     NUMBER(2) NOT NULL
)
LOGGING;

ALTER TABLE stages
    ADD CONSTRAINT ck_stage_type CHECK ( stage_type IN (
        'group',
        'quarterfinal',
        'semifinal',
        'final',
        'third_place'
    ) );

ALTER TABLE stages ADD CONSTRAINT stages_pk PRIMARY KEY ( id );

ALTER TABLE stages ADD CONSTRAINT uq_stage_name_per_tournament UNIQUE ( tournament_id,
                                                                        name );

CREATE TABLE t_groups (
    id              NUMBER NOT NULL,
    tournament_id   NUMBER NOT NULL,
    name            VARCHAR2(40) NOT NULL
)
LOGGING;

ALTER TABLE t_groups ADD CONSTRAINT t_groups_pk PRIMARY KEY ( id );

ALTER TABLE t_groups ADD CONSTRAINT uq_group_name_per_tournament UNIQUE ( tournament_id,
                                                                          name );

CREATE TABLE team_groups (
    group_id   NUMBER NOT NULL,
    team_id    NUMBER NOT NULL
)
LOGGING;

ALTER TABLE team_groups ADD CONSTRAINT pk_team_groups PRIMARY KEY ( group_id,
                                                                    team_id );

CREATE TABLE teams (
    id     NUMBER NOT NULL,
    name   VARCHAR2(120) NOT NULL,
    logo   BLOB
)
LOGGING;

ALTER TABLE teams ADD CONSTRAINT teams_pk PRIMARY KEY ( id );

ALTER TABLE teams ADD CONSTRAINT uq_team_name UNIQUE ( name );

CREATE TABLE tournaments (
    id           NUMBER NOT NULL,
    name         VARCHAR2(200) NOT NULL,
    start_date   DATE NOT NULL,
    end_date     DATE NOT NULL,
    organizer    VARCHAR2(200)
)
LOGGING;

ALTER TABLE tournaments ADD CONSTRAINT tournaments_pk PRIMARY KEY ( id );

ALTER TABLE match_events
    ADD CONSTRAINT fk_events_match FOREIGN KEY ( match_id )
        REFERENCES matches ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE match_events
    ADD CONSTRAINT fk_events_player FOREIGN KEY ( player_id )
        REFERENCES players ( id )
            ON DELETE SET NULL
    NOT DEFERRABLE;

ALTER TABLE match_events
    ADD CONSTRAINT fk_events_team FOREIGN KEY ( team_id )
        REFERENCES teams ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE t_groups
    ADD CONSTRAINT fk_groups_tournament FOREIGN KEY ( tournament_id )
        REFERENCES tournaments ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE matches
    ADD CONSTRAINT fk_matches_away_team FOREIGN KEY ( away_team_id )
        REFERENCES teams ( id )
    NOT DEFERRABLE;

ALTER TABLE matches
    ADD CONSTRAINT fk_matches_group FOREIGN KEY ( group_id )
        REFERENCES t_groups ( id )
            ON DELETE SET NULL
    NOT DEFERRABLE;

ALTER TABLE matches
    ADD CONSTRAINT fk_matches_home_team FOREIGN KEY ( home_team_id )
        REFERENCES teams ( id )
    NOT DEFERRABLE;

ALTER TABLE matches
    ADD CONSTRAINT fk_matches_stage FOREIGN KEY ( stage_id )
        REFERENCES stages ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE matches
    ADD CONSTRAINT fk_matches_tournament FOREIGN KEY ( tournament_id )
        REFERENCES tournaments ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE matches
    ADD CONSTRAINT fk_matches_winner_team FOREIGN KEY ( winner_team_id )
        REFERENCES teams ( id )
    NOT DEFERRABLE;

ALTER TABLE players
    ADD CONSTRAINT fk_players_team FOREIGN KEY ( team_id )
        REFERENCES teams ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE stages
    ADD CONSTRAINT fk_stages_tournament FOREIGN KEY ( tournament_id )
        REFERENCES tournaments ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE team_groups
    ADD CONSTRAINT fk_team_groups_group FOREIGN KEY ( group_id )
        REFERENCES t_groups ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE team_groups
    ADD CONSTRAINT fk_team_groups_team FOREIGN KEY ( team_id )
        REFERENCES teams ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

CREATE SEQUENCE match_events_id_seq START WITH 1 NOCACHE;

CREATE OR REPLACE TRIGGER match_events_id_trg BEFORE
    INSERT ON match_events
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    SELECT
        match_events_id_seq.NEXTVAL
    INTO :new.id
    FROM
        dual;

END;
/

CREATE SEQUENCE matches_id_seq START WITH 1 NOCACHE;

CREATE OR REPLACE TRIGGER matches_id_trg BEFORE
    INSERT ON matches
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    SELECT
        matches_id_seq.NEXTVAL
    INTO :new.id
    FROM
        dual;

END;
/

CREATE SEQUENCE players_id_seq START WITH 1 NOCACHE;

CREATE OR REPLACE TRIGGER players_id_trg BEFORE
    INSERT ON players
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    SELECT
        players_id_seq.NEXTVAL
    INTO :new.id
    FROM
        dual;

END;
/

CREATE SEQUENCE stages_id_seq START WITH 1 NOCACHE;

CREATE OR REPLACE TRIGGER stages_id_trg BEFORE
    INSERT ON stages
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    SELECT
        stages_id_seq.NEXTVAL
    INTO :new.id
    FROM
        dual;

END;
/

CREATE SEQUENCE t_groups_id_seq START WITH 1 NOCACHE;

CREATE OR REPLACE TRIGGER t_groups_id_trg BEFORE
    INSERT ON t_groups
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    SELECT
        t_groups_id_seq.NEXTVAL
    INTO :new.id
    FROM
        dual;

END;
/

CREATE SEQUENCE teams_id_seq START WITH 1 NOCACHE;

CREATE OR REPLACE TRIGGER teams_id_trg BEFORE
    INSERT ON teams
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    SELECT
        teams_id_seq.NEXTVAL
    INTO :new.id
    FROM
        dual;

END;
/

CREATE SEQUENCE tournaments_id_seq START WITH 1 NOCACHE;

CREATE OR REPLACE TRIGGER tournaments_id_trg BEFORE
    INSERT ON tournaments
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    SELECT
        tournaments_id_seq.NEXTVAL
    INTO :new.id
    FROM
        dual;

END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             8
-- CREATE INDEX                             4
-- ALTER TABLE                             34
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           7
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          7
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
